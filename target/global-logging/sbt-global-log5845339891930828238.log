[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Aleksi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Aleksi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (AdoptOpenJDK Java 11.0.8)
[debug]       Load.loadUnit: plugins took 74.4749ms
[debug]       Load.loadUnit: defsScala took 0.2023ms
[debug] [Loading] Scanning directory C:\Users\Aleksi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aleksi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.5364 ms
[debug]           Load.resolveProject(global-plugins) took 34.5055ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Aleksi\.sbt\1.0\plugins, plugins: List(<none>))) took 70.0687ms
[debug] [Loading] Done in C:\Users\Aleksi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 86.1889ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2093ms
[debug]     Load.loadUnit(file:/C:/Users/Aleksi/.sbt/1.0/plugins/, ...) took 167.7828ms
[debug]   Load.apply: load took 331.2744ms
[debug]   Load.apply: resolveProjects took 5.7199ms
[debug]   Load.apply: finalTransforms took 43.7826ms
[debug]   Load.apply: config.delegates took 5.2519ms
[debug]   Load.apply: Def.make(settings)... took 1021.7401ms
[debug]   Load.apply: structureIndex took 71.5407ms
[debug]   Load.apply: mkStreams took 1.1772ms
[info] loading global plugins from C:\Users\Aleksi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2914.6821ms
[debug]           Load.loadUnit: plugins took 18.2335ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\Aleksi\IdeaProjects\Labyrinth\project
[debug]             Load.loadUnit: mkEval took 6.9312ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aleksi\IdeaProjects\Labyrinth\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1731 ms
[info] loading settings for project labyrinth-build from idea.sbt ...
[debug]               Load.resolveProject(labyrinth-build) took 1.8872ms
[debug]             Load.loadTransitive: finalizeProject(Project(id labyrinth-build, base: C:\Users\Aleksi\IdeaProjects\Labyrinth\project, plugins: List(<none>))) took 3.4605ms
[debug] [Loading] Done in C:\Users\Aleksi\IdeaProjects\Labyrinth\project, returning: (labyrinth-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1651.5923ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7506ms
[debug]         Load.loadUnit(file:/C:/Users/Aleksi/IdeaProjects/Labyrinth/project/, ...) took 1673.2894ms
[debug]       Load.apply: load took 1674.5127ms
[debug]       Load.apply: resolveProjects took 0.0959ms
[debug]       Load.apply: finalTransforms took 8.8465ms
[debug]       Load.apply: config.delegates took 0.2959ms
[debug]       Load.apply: Def.make(settings)... took 54.4569ms
[debug]       Load.apply: structureIndex took 20.1976ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\Aleksi\IdeaProjects\Labyrinth\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2757.0427ms
[debug]     Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory C:\Users\Aleksi\IdeaProjects\Labyrinth
[debug]       Load.loadUnit: mkEval took 0.1656ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aleksi\IdeaProjects\Labyrinth, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6445 ms
[info] loading settings for project labyrinth from build.sbt ...
[debug]         Load.resolveProject(labyrinth) took 26.1627ms
[debug]       Load.loadTransitive: finalizeProject(Project(id labyrinth, base: C:\Users\Aleksi\IdeaProjects\Labyrinth, plugins: List(<none>))) took 28.7391ms
[debug] [Loading] Done in C:\Users\Aleksi\IdeaProjects\Labyrinth, returning: (labyrinth)
[debug]     Load.loadUnit: loadedProjectsRaw took 1496.1096ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.1268ms
[debug]   Load.loadUnit(file:/C:/Users/Aleksi/IdeaProjects/Labyrinth/, ...) took 4265.8ms
[debug] Load.apply: load took 4267.2752ms
[debug] Load.apply: resolveProjects took 0.0799ms
[debug] Load.apply: finalTransforms took 18.2599ms
[debug] Load.apply: config.delegates took 0.2622ms
[debug] Load.apply: Def.make(settings)... took 50.131ms
[debug] Load.apply: structureIndex took 23.3035ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to Labyrinth (in build file:/C:/Users/Aleksi/IdeaProjects/Labyrinth/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58467 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58467, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Labyrinth (in build file:/C:/Users/Aleksi/IdeaProjects/Labyrinth/)
[debug] > Exec(idea-shell, None, None)
